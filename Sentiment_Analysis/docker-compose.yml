# Avendo più servizi che devono comunicare tra loro (ad esempio: API FastAPI + MLflow), allora Docker Compose è molto utile per avviarli tutti insieme con un solo comando.
version: '3.8'

services:
# 1. Avvia MLflow Server sulla porta 5000.
# 2. Registra modelli e tracking nel database SQLite (mlflow/mlflow.db).
# 3. Usa un volume persistente (./mlflow:/mlflow) per non perdere i dati tra riavvii.
  mlflow:
    image: mlflow:latest
    build:
      context: .
      dockerfile: Dockerfile  # Usa il Dockerfile per MLflow
    ports:
      - "5000:5000"  # MLflow UI
    volumes:
      - ./mlflow:/mlflow  # Persistenza dati MLflow
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - BACKEND_STORE_URI=sqlite:///mlflow/mlflow.db

  api:
  # Avvia FastAPI sulla porta 8000.
  # Recupera i modelli da MLflow.
  # Dipende da mlflow, quindi attende che MLflow sia pronto.
    build:
      context: .
      dockerfile: Dockerfile.api  # Dockerfile per FastAPI
    ports:
      - "8000:8000"  # API FastAPI
    depends_on:
      - mlflow  # Avvia MLflow prima dell'API
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000

# services:
#   fastapi:
#     build: .
#     container_name: sentiment_api
#     ports:
#       - "8000:8000"
#     depends_on:
#       - mlflow
#     environment:
#       - MLFLOW_TRACKING_URI=http://mlflow:5000
#     networks:
#       - sentiment_network

#   mlflow:
#     image: ghcr.io/mlflow/mlflow:v2.9.1
#     container_name: mlflow_server
#     ports:
#       - "5000:5000"
#     volumes:
#       - mlflow_data:/mlflow
#     command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri sqlite:///mlflow.db --default-artifact-root /mlflow
#     networks:
#       - sentiment_network

# networks:
#   sentiment_network:

# volumes:
#   mlflow_data:

